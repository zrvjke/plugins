(function () {
    'use strict';

    // ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ======
    const ID = 'rt_omdb_dual';
    const NAME = 'Rotten Tomatoes (OMDb Dual)';
    const STORE = {
        get key() { return (Lampa.Storage.get(ID + '_key', '') || '').trim(); },
        set key(v) { Lampa.Storage.set(ID + '_key', String(v || '').trim()); },
        get hideTmdb() { return !!Lampa.Storage.get(ID + '_hide_tmdb', false); },
        set hideTmdb(v) { Lampa.Storage.set(ID + '_hide_tmdb', !!v); }
    };

    const ICONS = {
        tomato: 'https://www.rottentomatoes.com/assets/pizza-pie/images/icons/tomatometer/tomatometer.svg',
        popcorn: 'https://www.rottentomatoes.com/assets/pizza-pie/images/icons/audience/audience.svg',
        certified: 'https://www.rottentomatoes.com/assets/pizza-pie/images/icons/tomatometer/certified_fresh-notext.56a8e219a92.svg',
        fresh: 'https://www.rottentomatoes.com/assets/pizza-pie/images/icons/tomatometer/tomatometer-fresh.149b5e95350.svg',
        rotten: 'https://www.rottentomatoes.com/assets/pizza-pie/images/icons/tomatometer/tomatometer-rotten.149b5e95350.svg'
    };

    const cache = Object.create(null);

    // ====== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ —Å–µ—Ç–∏ ======
    function netJSON(url) {
        return new Promise((resolve) => {
            Lampa.Network.get(url, {}, resolve, () => resolve(null));
        });
    }
    function netTEXT(url) {
        return new Promise((resolve) => {
            Lampa.Network.get(url, {}, (t) => resolve(t), () => resolve(''));
        });
    }

    // ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª—è–º–∏) ======
    function openSettingsModal() {
        const root = document.createElement('div');
        root.className = 'about';
        root.style.padding = '10px 0';

        root.innerHTML = `
            <div class="settings-param selector">
                <div class="settings-param__name">OMDb API –∫–ª—é—á</div>
                <div class="settings-param__value">
                    <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OMDb API –∫–ª—é—á (omdbapi.com)" value="${STORE.key}" style="width: 100%; padding: 5px;">
                </div>
            </div>
            <div class="settings-param selector">
                <div class="settings-param__name">–°–∫—Ä—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ TMDb –≤ –∫–∞—Ä—Ç–æ—á–∫–µ</div>
                <div class="settings-param__value">
                    <label><input type="checkbox" ${STORE.hideTmdb ? 'checked' : ''}> –í–∫–ª—é—á–∏—Ç—å</label>
                </div>
            </div>
            <div class="settings-param selector">
                <div class="settings-param__name">–ì–¥–µ –≤–∑—è—Ç—å –∫–ª—é—á OMDb?</div>
                <div class="settings-param__value">–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ omdbapi.com (Email ‚Üí API Key)</div>
            </div>
        `;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        root.querySelector('input[type="text"]').addEventListener('input', function () {
            STORE.key = this.value;
            console.log('API Key updated to:', this.value);
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è TMDB
        root.querySelector('input[type="checkbox"]').addEventListener('change', function () {
            STORE.hideTmdb = this.checked;
            Lampa.Noty.show(this.checked ? 'TMDb –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç' : 'TMDb –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω');
            console.log('TMDB hidden:', this.checked);
        });

        Lampa.Modal.open({
            title: NAME,
            html: root,
            onBack: function () {
                Lampa.Modal.close();
                Lampa.Controller.toggle('settings_component');
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
    function mountSettingsEntry() {
        // –ï—Å–ª–∏ SettingsApi –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ ¬´–ø—É—Å–∫–∞—Ç–µ–ª—å¬ª –º–æ–¥–∞–ª–∫–∏
        if (Lampa.SettingsApi && Lampa.SettingsApi.addComponent) {
            try {
                Lampa.SettingsApi.addComponent({
                    component: ID,
                    name: NAME,
                    icon: 'üçÖ',
                    onSelect: openSettingsModal
                });
                return;
            } catch (e) { /* –ø–æ–π–¥—ë–º ¬´–≤—Ä—É—á–Ω—É—é¬ª –Ω–∏–∂–µ */ }
        }

        // ¬´–í—Ä—É—á–Ω—É—é¬ª: –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é
        const attachOnce = () => {
            const menu = document.querySelector('.settings .menu .list, .settings .menu__list, .settings .scroll .list');
            if (!menu) return;

            if (menu.querySelector(`[data-rt="${ID}"]`)) return;

            const item = document.createElement('div');
            item.className = 'selector';
            item.setAttribute('data-rt', ID);
            item.innerHTML = `<div class="name">üçÖ ${NAME}</div>`;

            item.addEventListener('click', openSettingsModal);
            menu.appendChild(item);
        };

        // –ø—Ä–æ–±—É–µ–º —Å–µ–π—á–∞—Å
        attachOnce();

        // –∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        Lampa.Listener.follow('settings', (e) => {
            if (e.type === 'open') setTimeout(attachOnce, 50);
        });
    }

    // ====== –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ ======
    async function getRtByOmdbOrRt({ imdb, title, year }) {
        const key = STORE.key;
        const cacheKey = imdb || (title + '|' + (year || ''));
        if (cache[cacheKey]) return cache[cacheKey];

        let result = { tomatometer: null, audience: null, badge: null };

        if (key && imdb) {
            const url = `https://www.omdbapi.com/?apikey=${encodeURIComponent(key)}&i=${encodeURIComponent(imdb)}&plot=short&r=json`;
            const data = await netJSON(url);
            if (data && !data.Error && Array.isArray(data.Ratings)) {
                const rt = data.Ratings.find(r => r.Source === 'Rotten Tomatoes');
                if (rt && rt.Value) result.tomatometer = rt.Value; // "92%"
            }
        }

        // –î–æ—Ç—è–≥–∏–≤–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ RT (–¥–ª—è audience –∏/–∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞)
        if (!result.tomatometer || !result.audience) {
            const search = await netJSON('https://www.rottentomatoes.com/napi/search/?query=' + encodeURIComponent(title));
            try {
                let movie = null;

                if (search && search.movies && search.movies.length) {
                    if (year) {
                        movie = search.movies.find(m => String(m.year || '').includes(String(year))) || search.movies[0];
                    } else movie = search.movies[0];
                }

                const url = movie && movie.url ? ('https://www.rottentomatoes.com' + movie.url) : null;

                if (url) {
                    const html = await netTEXT(url);

                    if (!result.tomatometer) {
                        const m1 = html.match(/"tomatometerScore":\s*{"score":\s*([0-9]{1,3})/i) ||
                                   html.match(/tomatometer.*?([0-9]{1,3})%/i);
                        if (m1) result.tomatometer = m1[1] + '%';
                    }

                    const m2 = html.match(/"audienceScore":\s*{"score":\s*([0-9]{1,3})/i) ||
                                 html.match(/Audience Score[^0-9]*([0-9]{1,3})%/i);
                    if (m2) result.audience = m2[1] + '%';

                    if (/certified_fresh/.test(html)) result.badge = 'certified';
                    else if (/tomatometer-fresh|fresh/.test(html)) result.badge = 'fresh';
                    else if (/rotten/.test(html)) result.badge = 'rotten';
                }
            } catch (e) { /* –º–æ–ª—á–∏–º */ }
        }

        cache[cacheKey] = result;
        return result;
    }

    function hideTmdbIfNeeded($root) {
        if (!STORE.hideTmdb) return;
        try {
            $root.find('.full--rating .rating').each(function () {
                const $r = $(this);
                const label = ($r.find('.source,.title').text() || '').trim().toLowerCase();
                if (label.includes('tmdb')) $r.remove();
            });
        } catch (e) { /* jQuery –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤–µ–∑–¥–µ */ }
    }

    function injectRatings(tomatometer, audience, badge) {
        const host = document.querySelector('.full-info, .full__items, .full--rating');
        if (!host) return;
        if (host.querySelector('.rt-omdb-dual')) return;

        const wrap = document.createElement('div');
        wrap.className = 'rt-omdb-dual';
        wrap.style.marginTop = '10px';
        wrap.style.display = 'flex';
        wrap.style.alignItems = 'center';
        wrap.style.gap = '18px';

        const leftIcon = badge && ICONS[badge] ? ICONS[badge] : ICONS.tomato;

        wrap.innerHTML = `
            <div style="display:flex;align-items:center;gap:8px;">
                <img src="${leftIcon}" style="width:22px;height:22px;">
                <span style="font-weight:700;color:#b02a2a;">${tomatometer || '<span style="color:#888">‚Äî</span>'}</span>
            </div>
            <div style="display:flex;align-items:center;gap:8px;">
                <img src="${ICONS.popcorn}" style="width:22px;height:22px;">
                <span style="font-weight:700;color:#ad6a00;">${audience || '<span style="color:#888">‚Äî</span>'}</span>
            </div>
        `;

        host.appendChild(wrap);
    }

    // ====== –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫ ======
    function run() {
        // –ü—É–Ω–∫—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        mountSettingsEntry();

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        Lampa.Listener.follow('full', function (e) {
            if (e.type !== 'complite') return;

            const card = e.data?.movie || e.data?.tv || e.data || {};
            const imdb = card.imdb_id || card.imdb || '';
            const title = card.title || card.name || '';
            const year = card.release_year || card.year || '';

            if (!title && !imdb) return;

            if (e.body) hideTmdbIfNeeded(e.body);

            getRtByOmdbOrRt({ imdb, title, year }).then((r) => {
                if (!STORE.key && !r.tomatometer && !r.audience) {
                    Lampa.Noty.show('Rotten Tomatoes: –≤–≤–µ–¥–∏—Ç–µ OMDb API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.');
                }
                injectRatings(r.tomatometer, r.audience, r.badge);
            });
        });
    }

    // ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ ======
    if (Lampa.Plugin && Lampa.Plugin.create) {
        Lampa.Plugin.create({
            title: NAME,
            id: ID,
            icon: 'üçÖ',
            version: '1.3.0',
            description: 'Tomatometer –∏ Audience —Å Rotten Tomatoes. –í–≤–æ–¥ OMDb –∫–ª—é—á–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ TMDb.',
            author: 'custom'
        }, run);
    } else {
        // –ù–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–∫–∞—Ö Lampa ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º
        run();
    }
})();
