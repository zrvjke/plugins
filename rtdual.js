(function() {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É API Lampa
    if (!window.Lampa || !Lampa.Plugin) {
        console.error('Lampa.Plugin –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!');
        return;
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    const PLUGIN_ID = 'rt_ratings';
    const OMDB_URL = 'https://www.omdbapi.com/';

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
    Lampa.Plugin.register({
        id: PLUGIN_ID,
        name: 'Rotten Tomatoes',
        version: '2.0.1',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ Rotten Tomatoes —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—å TMDb',
        type: 'modify',
        params: [
            {
                id: 'omdb_key',
                type: 'input',
                name: 'OMDb API Key',
                placeholder: '–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ omdbapi.com'
            },
            {
                id: 'hide_tmdb',
                type: 'checkbox',
                name: '–°–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ TMDb',
                default: false
            }
        ]
    });

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    Lampa.SettingsApi.addComponent({
        component: PLUGIN_ID,
        name: 'Rotten Tomatoes',
        icon: 'üçÖ'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    Lampa.SettingsApi.addParam({
        component: PLUGIN_ID,
        param: 'omdb_key',
        type: 'input',
        name: 'OMDb API Key',
        default: '',
        value: Lampa.Storage.get(PLUGIN_ID + '_omdb_key', '') || '',
        onChange: function(val) {
            Lampa.Storage.set(PLUGIN_ID + '_omdb_key', (val || '').trim());
            Lampa.Noty.show('–ö–ª—é—á OMDb —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
        }
    });

    Lampa.SettingsApi.addParam({
        component: PLUGIN_ID,
        param: 'hide_tmdb',
        type: 'checkbox',
        name: '–°–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ TMDb',
        default: false,
        value: !!Lampa.Storage.get(PLUGIN_ID + '_hide_tmdb', false),
        onChange: function(val) {
            Lampa.Storage.set(PLUGIN_ID + '_hide_tmdb', !!val);
            Lampa.Noty.show('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            updateTmdbVisibility();
        }
    });

    // –ö—ç—à —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    const cache = {};

    // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ TMDb —Ä–µ–π—Ç–∏–Ω–≥–∞
    function updateTmdbVisibility() {
        const hide = Lampa.Storage.get(PLUGIN_ID + '_hide_tmdb', false);
        document.querySelectorAll('.rate--tmdb').forEach(el => {
            el.style.display = hide ? 'none' : '';
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RT —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    function addRTRatings(container, critics, audience) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ RT —Ä–µ–π—Ç–∏–Ω–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        container.querySelectorAll('.rate--rt').forEach(el => el.remove());

        const criticsValue = critics ? critics + '%' : 'N/A';
        const audienceValue = audience ? audience + '%' : 'N/A';

        const html = `
            <div class="rating rate--rt" style="display: flex; align-items: center; gap: 8px; margin-left: 15px;">
                <img src="https://www.rottentomatoes.com/assets/pizza-pie/images/icons/tomatometer/fresh.svg" 
                     style="width:18px; height:18px; vertical-align: middle;">
                <span style="font-weight: bold;">${criticsValue}</span>
                <img src="https://www.rottentomatoes.com/assets/pizza-pie/images/icons/audience/aud_score-fresh.svg" 
                     style="width:18px; height:18px; vertical-align: middle; margin-left: 5px;">
                <span style="font-weight: bold;">${audienceValue}</span>
            </div>
        `;
        
        container.insertAdjacentHTML('beforeend', html);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    Lampa.Listener.follow('full', function(e) {
        if (e.type !== 'complite') return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å TMDb
        updateTmdbVisibility();

        const movie = e.data?.movie || e.data?.tv;
        if (!movie?.imdb_id) return;

        const apiKey = Lampa.Storage.get(PLUGIN_ID + '_omdb_key', '').trim();
        if (!apiKey) {
            Lampa.Noty.show('–í–≤–µ–¥–∏—Ç–µ OMDb API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞');
            return;
        }

        const cacheKey = movie.imdb_id;
        if (cache[cacheKey]) {
            const ratingsBlock = e.body.querySelector('.info__rate, .full--rating');
            if (ratingsBlock) {
                addRTRatings(ratingsBlock, cache[cacheKey].critics, cache[cacheKey].audience);
            }
            return;
        }

        fetch(`${OMDB_URL}?apikey=${apiKey}&i=${movie.imdb_id}&tomatoes=true`)
            .then(res => res.json())
            .then(data => {
                if (!data) return;

                const rtRating = data.Ratings?.find(r => r.Source === 'Rotten Tomatoes');
                const critics = rtRating?.Value?.replace('%', '');
                const audience = data.tomatoUserMeter;

                cache[cacheKey] = { critics, audience };
                
                const ratingsBlock = e.body.querySelector('.info__rate, .full--rating');
                if (ratingsBlock) {
                    addRTRatings(ratingsBlock, critics, audience);
                }
            })
            .catch(() => Lampa.Noty.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ RT'));
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (window.appready) {
        updateTmdbVisibility();
    } else {
        Lampa.Listener.follow('app', function(e) {
            if (e.type === 'ready') updateTmdbVisibility();
        });
    }

})();
